version: "3"

services:
  backend:
    image: androidsprint:latest
    depends_on:
      - configurator
    deploy:
      restart_policy:
        condition: on-failure
    volumes:
      - sites:/home/frappe/frappe-bench/sites
      - logs:/home/frappe/frappe-bench/logs

  configurator:
    image: androidsprint:latest
    
    deploy:
      restart_policy:
        condition: none
    entrypoint:
      - bash
      - -c
    command:
      - >
        echo "{}" > sites/common_site_config.json;
        ls -1 apps > sites/apps.txt;
        bench set-config -g db_host $$DB_HOST;
        bench set-config -gp db_port $$DB_PORT;
        bench set-config -g redis_cache "redis://$$REDIS_CACHE";
        bench set-config -g redis_queue "redis://$$REDIS_QUEUE";
        bench set-config -g redis_socketio "redis://$$REDIS_SOCKETIO";
        bench set-config -gp socketio_port $$SOCKETIO_PORT;
        bench setup supervisor --skip-redis;
    environment:
      DB_HOST: dev.androidsprint.ru
      DB_PORT: 3306
      REDIS_CACHE: dev.androidsprint.ru:6400
      REDIS_QUEUE: dev.androidsprint.ru:6401
      REDIS_SOCKETIO: dev.androidsprint.ru:6402
      SOCKETIO_PORT: "9000"
    volumes:
      - sites:/home/frappe/frappe-bench/sites
      - logs:/home/frappe/frappe-bench/logs

  create-site:
    image: androidsprint:latest
    deploy:
      restart_policy:
        condition: none
    working_dir: /home/frappe/frappe-bench/sites
    volumes:
      - sites:/home/frappe/frappe-bench/sites
      - logs:/home/frappe/frappe-bench/logs
    depends_on:
      - configurator
      - frontend
    entrypoint:
      - bash
      - -c
    command:
      - >
        wait-for-it -t 120 dev.androidsprint.ru:3306;
        wait-for-it -t 120 dev.androidsprint.ru:6400;
        wait-for-it -t 120 dev.androidsprint.ru:6401;
        wait-for-it -t 120 dev.androidsprint.ru:6402;
        export start=`date +%s`;
        until [[ -n `grep -hs ^ common_site_config.json | jq -r ".db_host // empty"` ]] && \
          [[ -n `grep -hs ^ common_site_config.json | jq -r ".redis_cache // empty"` ]] && \
          [[ -n `grep -hs ^ common_site_config.json | jq -r ".redis_queue // empty"` ]];
        do
          echo "Waiting for common_site_config.json to be created";
          sleep 5;
          if (( `date +%s`-start > 120 )); then
            echo "could not find common_site_config.json with required keys";
            exit 1
          fi
        done;
        echo "common_site_config.json found";
        
        bench new-site lms.localhost --verbose --force --db-type mariadb --mariadb-root-password asdad123hkk23hl1gl3kjg13lajsdkbjbl --admin-password admin --install-app lms --set-default --no-mariadb-socket;
        bench --site lms.localhost set-config developer_mode 1;
        bench --site lms.localhost clear-cache;
        bench --site lms.localhost set-config mute_emails 1;
        bench use lms.localhost;

        
  # db:
  #   image: postgres:13.5
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready"]
  #     interval: 1s
  #     timeout: 5s
  #     retries: 5
  #   command: []
  #   environment:
  #     POSTGRES_PASSWORD: ${DB_PASSWORD:?No db password set}
  #   volumes:
  #     - pdb-data:/var/lib/postgresql/data
  #   ports:
  #     - 3306:3306


  frontend:
    image: androidsprint:latest
    deploy:
      restart_policy:
        condition: on-failure
    command:
      - nginx-entrypoint.sh
    environment:
      BACKEND: backend:8000
      SOCKETIO: websocket:9000
      FRAPPE_SITE_NAME_HEADER: ${FRAPPE_SITE_NAME_HEADER:-$$host}
      UPSTREAM_REAL_IP_ADDRESS: ${UPSTREAM_REAL_IP_ADDRESS:-127.0.0.1}
      UPSTREAM_REAL_IP_HEADER: ${UPSTREAM_REAL_IP_HEADER:-X-Forwarded-For}
      UPSTREAM_REAL_IP_RECURSIVE: ${UPSTREAM_REAL_IP_RECURSIVE:-off}
      PROXY_READ_TIMOUT: ${PROXY_READ_TIMOUT:-120}
      CLIENT_MAX_BODY_SIZE: ${CLIENT_MAX_BODY_SIZE:-50m}
    volumes:
      - sites:/home/frappe/frappe-bench/sites
      - logs:/home/frappe/frappe-bench/logs
    ports:
      - "8080:8080"

  # queue-default:
  #   image: androidsprint:latest
  #   depends_on:
  #     - configurator
  #   deploy:
  #     restart_policy:
  #       condition: on-failure
  #   command:
  #     - bench
  #     - worker
  #     - --queue
  #     - default
  #   volumes:
  #     - sites:/home/frappe/frappe-bench/sites
  #     - logs:/home/frappe/frappe-bench/logs

  # queue-long:
  #   image: androidsprint:latest
    
  #   deploy:
  #     restart_policy:
  #       condition: on-failure
  #   command:
  #     - bench
  #     - worker
  #     - --queue
  #     - long
  #   volumes:
  #     - sites:/home/frappe/frappe-bench/sites
  #     - logs:/home/frappe/frappe-bench/logs

  # queue-short:
  #   image: androidsprint:latest
    
  #   deploy:
  #     restart_policy:
  #       condition: on-failure
  #   command:
  #     - bench
  #     - worker
  #     - --queue
  #     - short
  #   volumes:
  #     - sites:/home/frappe/frappe-bench/sites
  #     - logs:/home/frappe/frappe-bench/logs

  # redis-queue:
  #   image: redis:6.2-alpine
    
  #   deploy:
  #     restart_policy:
  #       condition: on-failure
  #   volumes:
  #     - redis-queue-data:/data

  # redis-cache:
  #   image: redis:6.2-alpine
    
  #   deploy:
  #     restart_policy:
  #       condition: on-failure
  #   volumes:
  #     - redis-cache-data:/data

  # redis-socketio:
  #   image: redis:6.2-alpine
    
  #   deploy:
  #     restart_policy:
  #       condition: on-failure
  #   volumes:
  #     - redis-socketio-data:/data

  scheduler:
    image: androidsprint:latest
    
    deploy:
      restart_policy:
        condition: on-failure
    command:
      - bench
      - schedule
    volumes:
      - sites:/home/frappe/frappe-bench/sites
      - logs:/home/frappe/frappe-bench/logs

  websocket:
    image: androidsprint:latest
    depends_on:
      - configurator
    deploy:
      restart_policy:
        condition: on-failure
    command:
      - node
      - /home/frappe/frappe-bench/apps/frappe/socketio.js
    volumes:
      - sites:/home/frappe/frappe-bench/sites
      - logs:/home/frappe/frappe-bench/logs

volumes:
  redis-queue-data:
  redis-cache-data:
  redis-socketio-data:
  sites:
  logs:
  db-data: